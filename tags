!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ARCH	./Makefile	/^ARCH	= $(shell uname -m | sed -e 's\/i[4-9]86\/i386\/' -e 's\/armv[3-6][lb]\/arm\/')$/;"	m
BUFSIZE	./params.h	15;"	d
CC	./Makefile	/^CC	= $(DIET) gcc$/;"	m
CFLAGS	./Makefile	/^CFLAGS	= -Os -Wall -pipe -fomit-frame-pointer$/;"	m
D	./rmd.h	/^	u8  D[64]; \/* 512 bit data block *\/$/;"	m	struct:__anon2
DEBUG	./do_checkqpasswd.c	6;"	d	file:
DEFAULT_SHELL	./params.h	10;"	d
DEST	./Makefile	/^DEST	= \/command$/;"	m
DIET	./Makefile	/^DIET	= $(shell basename `which diet 2>\/dev\/null` 2>\/dev\/null)$/;"	m
DIGEST_MAX	./params.h	14;"	d
F	./md5.c	232;"	d	file:
F	./md5.c	7;"	d	file:
F	./rmd160.c	11;"	d	file:
F	./rmd160.c	338;"	d	file:
FD_CHECKPASSWD	./params.h	6;"	d
FD_CHECKQPASSWD	./params.h	7;"	d
FD_MULTICHECKPW	./params.h	8;"	d
FD_QPASSWD	./params.h	5;"	d
FF	./rmd160.c	18;"	d	file:
FF	./rmd160.c	339;"	d	file:
FFF	./rmd160.c	340;"	d	file:
FFF	./rmd160.c	38;"	d	file:
G	./md5.c	233;"	d	file:
G	./md5.c	8;"	d	file:
G	./rmd160.c	12;"	d	file:
G	./rmd160.c	341;"	d	file:
GET	./md5.c	237;"	d	file:
GET	./md5.c	26;"	d	file:
GET	./md5.c	34;"	d	file:
GG	./rmd160.c	22;"	d	file:
GG	./rmd160.c	342;"	d	file:
GGG	./rmd160.c	343;"	d	file:
GGG	./rmd160.c	42;"	d	file:
GROUP	./Makefile	/^GROUP	= nofiles$/;"	m
H	./md5.c	234;"	d	file:
H	./md5.c	9;"	d	file:
H	./rmd160.c	13;"	d	file:
H	./rmd160.c	344;"	d	file:
HH	./rmd160.c	26;"	d	file:
HH	./rmd160.c	345;"	d	file:
HHH	./rmd160.c	346;"	d	file:
HHH	./rmd160.c	46;"	d	file:
I	./md5.c	10;"	d	file:
I	./md5.c	235;"	d	file:
I	./rmd160.c	14;"	d	file:
I	./rmd160.c	347;"	d	file:
II	./rmd160.c	30;"	d	file:
II	./rmd160.c	348;"	d	file:
III	./rmd160.c	349;"	d	file:
III	./rmd160.c	50;"	d	file:
Intermediate_Hash	./sha1.h	/^    u32 Intermediate_Hash[SHA1HashSize\/4]; \/* Message Digest  *\/$/;"	m	struct:SHA1_CTX
J	./rmd160.c	15;"	d	file:
J	./rmd160.c	350;"	d	file:
JJ	./rmd160.c	34;"	d	file:
JJ	./rmd160.c	351;"	d	file:
JJJ	./rmd160.c	352;"	d	file:
JJJ	./rmd160.c	54;"	d	file:
LASTPOP_DEFAULT	./params.h	47;"	d
LASTPOP_MAX	./params.h	13;"	d
LDFLAGS	./Makefile	/^LDFLAGS	= -s -lcrypt$/;"	m
LOG_CHECKQPASSWD_METHOD	./params.h	38;"	d
LOG_LOGINFAILURES	./params.h	35;"	d
LOG_MULTICHECKPW_STATUS	./params.h	37;"	d
LOG_MULTICHECKPW_TRY	./params.h	36;"	d
LOG_USER_SWITCHES	./params.h	39;"	d
LOG_VHOME_FOUND	./params.h	40;"	d
Length_High	./sha1.h	/^    u32 Length_High;           \/* Message length in bits      *\/$/;"	m	struct:SHA1_CTX
Length_Low	./sha1.h	/^    u32 Length_Low;            \/* Message length in bits      *\/$/;"	m	struct:SHA1_CTX
MANDIR	./Makefile	/^MANDIR	= \/usr\/share\/man$/;"	m
MD	./rmd.h	/^	u32 MD[5]; \/* used for the digest *\/$/;"	m	struct:__anon2
MD5_CTX	./md5.h	/^} MD5_CTX;$/;"	t	typeref:struct:__anon1
MD5_Final	./md5.c	/^void MD5_Final(u8 *result, MD5_CTX *ctx)$/;"	f
MD5_Final	./md5.h	13;"	d
MD5_Init	./md5.c	/^void MD5_Init(MD5_CTX *ctx)$/;"	f
MD5_Init	./md5.h	11;"	d
MD5_Update	./md5.c	/^void MD5_Update(MD5_CTX *ctx, void *data, u32 size)$/;"	f
MD5_Update	./md5.h	12;"	d
METHOD_ALL	./do_checkqpasswd.c	14;"	d	file:
METHOD_APOP	./do_checkqpasswd.c	9;"	d	file:
METHOD_CRAM_MD5	./do_checkqpasswd.c	10;"	d	file:
METHOD_CRAM_RIPEMD	./do_checkqpasswd.c	12;"	d	file:
METHOD_CRAM_SHA1	./do_checkqpasswd.c	11;"	d	file:
METHOD_DIGEST_MD5	./do_checkqpasswd.c	13;"	d	file:
METHOD_PLAIN	./do_checkqpasswd.c	8;"	d	file:
MODE_CHECKPASSWD	./qpasswd.h	120;"	d
MODE_CHECKQPASSWD	./qpasswd.h	121;"	d
MODE_MULTICHECKPW	./qpasswd.h	122;"	d
MODE_QPASSWD	./qpasswd.h	119;"	d
Message_Block	./sha1.h	/^    u8 Message_Block[64];      \/* 512-bit message blocks      *\/$/;"	m	struct:SHA1_CTX
Message_Block_Index	./sha1.h	/^    u32 Message_Block_Index;   \/* Index into message block array   *\/$/;"	m	struct:SHA1_CTX
NEED_ALL_CRYPTO_STUFF	./m_tests.c	5;"	d	file:
OBJS	./Makefile	/^OBJS	= buffer.o buffer_flush.o buffer_put.o buffer_write.o \\$/;"	m
OBJS2	./Makefile	/^OBJS2	= dozero.o fmt_str.o fmt_strn.o hextab.o m_tests.o test_cases.o$/;"	m
PAD	./hmac_md5.c	67;"	d	file:
PAD	./hmac_md5.c	6;"	d	file:
PAD	./hmac_rmd160.c	55;"	d	file:
PAD	./hmac_rmd160.c	6;"	d	file:
PAD	./hmac_sha1.c	55;"	d	file:
PAD	./hmac_sha1.c	6;"	d	file:
PRGS	./Makefile	/^PRGS	= multicheckpw test-cases$/;"	m
QPASSWD_FILE	./params.h	11;"	d
QPASSWD_MAX	./params.h	12;"	d
QP_BUFFER_H	./buffer.h	2;"	d
QP_CASE_H	./case.h	2;"	d
QP_CRYPTO_H	./crypto.h	2;"	d
QP_FMT_H	./fmt.h	2;"	d
QP_HEXTAB_H	./hextab.h	2;"	d
QP_MD5_H	./md5.h	2;"	d
QP_OPEN_H	./open.h	2;"	d
QP_PARAMS_H	./params.h	2;"	d
QP_QPASSWD_H	./qpasswd.h	2;"	d
QP_RMD_H	./rmd.h	2;"	d
QP_SCAN_H	./scan.h	2;"	d
QP_SHA1_H	./sha1.h	2;"	d
QP_SIG_H	./sig.h	2;"	d
QP_TEST_CASES_H	./test_cases.h	2;"	d
QP_TYPES_H	./types.h	2;"	d
READFD	./params.h	16;"	d
RMD160_CTX	./rmd.h	/^} RMD160_CTX;$/;"	t	typeref:struct:__anon2
RMD160_Final	./rmd160.c	/^void RMD160_Final(u8 *result, RMD160_CTX *ctx)$/;"	f
RMD160_Init	./rmd160.c	/^void RMD160_Init(RMD160_CTX *ctx)$/;"	f
RMD160_Update	./rmd160.c	/^void RMD160_Update(RMD160_CTX *ctx, const void *data, u32 size)$/;"	f
ROL	./rmd160.c	353;"	d	file:
ROL	./rmd160.c	8;"	d	file:
SEP	./qpasswd_gethome.c	3;"	d	file:
SET	./md5.c	236;"	d	file:
SET	./md5.c	25;"	d	file:
SET	./md5.c	28;"	d	file:
SETgid	./params.h	44;"	d
SETuid	./params.h	43;"	d
SHA1CircularShift	./sha1.c	171;"	d	file:
SHA1CircularShift	./sha1.c	6;"	d	file:
SHA1HashSize	./sha1.h	7;"	d
SHA1PadMessage	./sha1.c	/^static void SHA1PadMessage(SHA1_CTX *ctx)$/;"	f	file:
SHA1ProcessMessageBlock	./sha1.c	/^static void SHA1ProcessMessageBlock(SHA1_CTX *ctx)$/;"	f	file:
SHA1_CTX	./sha1.h	/^typedef struct SHA1_CTX$/;"	s
SHA1_CTX	./sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:SHA1_CTX
SHA1_Final	./sha1.c	/^void SHA1_Final(u8 *Message_Digest, SHA1_CTX *ctx)$/;"	f
SHA1_Init	./sha1.c	/^void SHA1_Init(SHA1_CTX *ctx)$/;"	f
SHA1_Update	./sha1.c	/^void SHA1_Update(SHA1_CTX *ctx, const void *data, u32 size)$/;"	f
STEP	./md5.c	11;"	d	file:
STEP	./md5.c	238;"	d	file:
STRIP	./Makefile	/^STRIP	= strip -R .note -R .comment$/;"	m
STRIPx	./Makefile	/^STRIPx	= strip -x -R .note -R .comment$/;"	m
TK	./hmac_md5.c	68;"	d	file:
TK	./hmac_md5.c	7;"	d	file:
TK	./hmac_rmd160.c	56;"	d	file:
TK	./hmac_rmd160.c	7;"	d	file:
TK	./hmac_sha1.c	56;"	d	file:
TK	./hmac_sha1.c	7;"	d	file:
WANT_CRAM_MD5	./crypto.h	10;"	d
WANT_CRAM_MD5	./crypto.h	13;"	d
WANT_CRAM_MD5	./params.h	29;"	d
WANT_CRAM_RIPEMD	./crypto.h	12;"	d
WANT_CRAM_RIPEMD	./crypto.h	15;"	d
WANT_CRAM_RIPEMD	./params.h	31;"	d
WANT_CRAM_SHA1	./crypto.h	11;"	d
WANT_CRAM_SHA1	./crypto.h	14;"	d
WANT_CRAM_SHA1	./params.h	30;"	d
WANT_DEBUG	./params.h	24;"	d
WANT_DIE_MSG	./params.h	23;"	d
WANT_DIGEST_MD5	./params.h	32;"	d
WANT_ENVIRON_CHECK	./params.h	26;"	d
WANT_ERRFDS	./params.h	25;"	d
WANT_LASTPOP	./params.h	22;"	d
WANT_PIDINFO	./params.h	19;"	d
WANT_SHADOW_PASSWD	./params.h	21;"	d
WANT_USAGE	./params.h	18;"	d
WANT_VALID_SHELL	./params.h	20;"	d
X	./rmd.h	/^	u32 X[16]; \/* current 16 bit chunk *\/$/;"	m	struct:__anon2
_BSD_SOURCE	./qpasswd.h	5;"	d
_XOPEN_SOURCE	./qpasswd.h	4;"	d
a	./md5.h	/^	u32 a,b,c,d;$/;"	m	struct:__anon1
b	./buffer.h	/^	u8 b[BUFSIZE]; \/* the buffer *\/$/;"	m	struct:__anon4
b	./md5.h	/^	u32 a,b,c,d;$/;"	m	struct:__anon1
block	./md5.h	/^	u32 block[16];$/;"	m	struct:__anon1
body	./md5.c	/^static void *body(MD5_CTX *ctx, void *data, u32 size)$/;"	f	file:
buf	./read3.c	/^str_t buf;$/;"	v
buffer	./md5.h	/^	u8 buffer[64];$/;"	m	struct:__anon1
buffer_flush	./buffer_flush.c	/^size_t buffer_flush(buffer_t *b)$/;"	f
buffer_put	./buffer_put.c	/^size_t buffer_put(buffer_t *b, const u8 *msg)$/;"	f
buffer_t	./buffer.h	/^} buffer_t;$/;"	t	typeref:struct:__anon4
buffer_write	./buffer_write.c	/^int buffer_write(int fd, const char *s, ssize_t n)$/;"	f
bytes_TO_u32	./rmd160.c	354;"	d	file:
bytes_TO_u32	./rmd160.c	60;"	d	file:
c	./md5.h	/^	u32 a,b,c,d;$/;"	m	struct:__anon1
case_diffb	./case_diffb.c	/^int case_diffb(const u8 *s, int len, const u8 *t)$/;"	f
compress	./rmd160.c	/^static void compress(RMD160_CTX *ctx)$/;"	f	file:
d	./md5.h	/^	u32 a,b,c,d;$/;"	m	struct:__anon1
data	./test_cases.h	/^  char *data;    \/* the data for testing *\/$/;"	m	struct:__anon5
datalen	./test_cases.h	/^  int   datalen; \/* if 0 - take the data as it is *\/$/;"	m	struct:__anon5
debug	./debug.c	/^void debug(const char *format, ...)$/;"	f
debug	./qpasswd.h	97;"	d
default_shell	./main.c	/^char *home, *shell, *default_shell=DEFAULT_SHELL;$/;"	v
die1	./die1.c	/^void die1(const char *user)$/;"	f
die111	./die111.c	/^void die111()$/;"	f
die2	./die2.c	/^void die2()$/;"	f
die_env	./die_env.c	/^void die_env(void)$/;"	f
die_msg	./die_msg.c	/^void die_msg(int r, const char *s)$/;"	f
die_msg	./qpasswd.h	103;"	d
die_multi	./qpasswd.h	113;"	d
die_multi	./qpasswd.h	115;"	d
die_shell	./die_shell.c	/^void die_shell(void)$/;"	f
do_checkpasswd	./do_checkpasswd.c	/^int do_checkpasswd(char *r_user, char *r_pass \/*, char *r_greet *\/)$/;"	f
do_checkqpasswd	./do_checkqpasswd.c	/^int do_checkqpasswd(char *r_user, char *r_pass, char *r_greet)$/;"	f
do_mkdir	./maildirmake.c	/^static int do_mkdir(const char *path)$/;"	f	file:
doexit	./doexit.c	/^void doexit(int x)$/;"	f
doname	./doname.c	/^void doname(void)$/;"	f
doname	./qpasswd.h	91;"	d
douser	./douser.c	/^void douser(const char *m)$/;"	f
douser	./qpasswd.h	109;"	d
dozero	./dozero.c	/^void dozero(char *b)$/;"	f
fd	./buffer.h	/^	int fd;        \/* fd, where we flush the buffer *\/$/;"	m	struct:__anon4
fd_size	./fd_size.c	/^size_t fd_size(int fd)$/;"	f
fd_write	./fd_write.c	/^int fd_write(int fd, const char *s, ssize_t n)$/;"	f
flush	./qpasswd.h	37;"	d
fmt_str	./fmt_str.c	/^size_t fmt_str(u8 *dst, const u8 *src)$/;"	f
fmt_strn	./fmt_strn.c	/^size_t fmt_strn(u8 *dst, const u8 *src, size_t limit)$/;"	f
fmt_u32	./fmt_u32.c	/^size_t fmt_u32(u8 *dst, const u32 i)$/;"	f
fromhex	./m_tests.c	/^int fromhex(char c)$/;"	f
hextab	./hextab.c	/^const char hextab[]="0123456789abcdef";$/;"	v
hi	./md5.h	/^	u32 lo, hi;$/;"	m	struct:__anon1
hmac_md5	./hmac_md5.c	/^void hmac_md5(text, key, digest)$/;"	f
hmac_rmd160	./hmac_rmd160.c	/^void hmac_rmd160(text, key, digest)$/;"	f
hmac_sha1	./hmac_sha1.c	/^void hmac_sha1(text, key, digest)$/;"	f
home	./main.c	/^char *home, *shell, *default_shell=DEFAULT_SHELL;$/;"	v
i32	./types.h	/^typedef signed int   i32;$/;"	t
i8	./types.h	/^typedef signed char   i8;$/;"	t
key	./test_cases.h	/^  char *key;     \/* the key for testing *\/$/;"	m	struct:__anon5
keylen	./test_cases.h	/^  int   keylen;  \/* if 0 - take the key as it is *\/$/;"	m	struct:__anon5
l	./buffer.h	/^	size_t l;      \/* len of current content *\/$/;"	m	struct:__anon4
l	./qpasswd.h	/^	int l;$/;"	m	struct:__anon3
l	./rmd.h	/^	u32 l;     \/* current length of data block -> D[l] *\/$/;"	m	struct:__anon2
lastpop	./qpasswd_gethome.c	/^u32 lastpop;$/;"	v
len	./rmd.h	/^	u32 len;   \/* full length *\/$/;"	m	struct:__anon2
lo	./md5.h	/^	u32 lo, hi;$/;"	m	struct:__anon1
log1	./log.c	/^int log1(const char *s1) { return log4(s1,0,0,0); }$/;"	f
log2	./log.c	/^int log2(const char *s1, const char *s2) { return log4(s1,s2,0,0); }$/;"	f
log3	./log.c	/^int log3(const char *s1, const char *s2, const char *s3) { return log4(s1,s2,s3,0); }$/;"	f
log4	./log.c	/^int log4(const char *s1, const char *s2, const char *s3, const char *s4)$/;"	f
logbuf	./buffer.c	/^buffer_t logbuf;$/;"	v
lognl	./lognl.c	/^void lognl(const char *s)$/;"	f
m_checkpassword	./m_checkpassword.c	/^void m_checkpassword(int argc, char **argv)$/;"	f
m_multicheckpw	./m_multicheckpw.c	/^void m_multicheckpw(int argc, char **argv)$/;"	f
m_qpasswd	./m_qpasswd.c	/^void m_qpasswd(int argc, char **argv)$/;"	f
maildirmake	./maildirmake.c	/^void maildirmake(const char *home)$/;"	f
main	./m_tests.c	/^int main(void)$/;"	f
main	./main.c	/^int main(int argc, char **argv)$/;"	f
me1	./main.c	/^const char me1[]="multicheckpw";$/;"	v
me2	./main.c	/^const char me2[]="checkpasswd";$/;"	v
me3	./main.c	/^const char me3[]="checkqpasswd";$/;"	v
me4	./main.c	/^const char me4[]="qpasswd";$/;"	v
mmap_file	./mmap_file.c	/^char *mmap_file(const char *fn, size_t *len, int prot) $/;"	f
mmap_ro	./qpasswd.h	53;"	d
mmap_rw	./qpasswd.h	55;"	d
mmap_wo	./qpasswd.h	54;"	d
mode	./main.c	/^int mode, ppid;$/;"	v
name	./main.c	/^const char *name;$/;"	v
name	./test_cases.h	/^  char *name;    \/* name, to be listed when testing *\/$/;"	m	struct:__anon5
open_append	./open.h	16;"	d
open_append	./qpasswd.h	67;"	d
open_file	./open_file.c	/^int open_file(const unsigned char *fn, int flags)$/;"	f
open_ro	./open.h	12;"	d
open_ro	./qpasswd.h	63;"	d
open_rw	./open.h	14;"	d
open_rw	./qpasswd.h	65;"	d
open_trunc	./open.h	15;"	d
open_trunc	./qpasswd.h	66;"	d
open_wo	./open.h	13;"	d
open_wo	./qpasswd.h	64;"	d
out	./m_tests.c	/^void out(const char *msg) { write(1,msg,strlen(msg)); }$/;"	f
ppid	./main.c	/^int mode, ppid;$/;"	v
qpasswd_gethome	./qpasswd_gethome.c	/^int qpasswd_gethome(const char *r_user, int *uid, int *gid, char *homebuf)$/;"	f
qpasswd_getpass	./qpasswd_getpass.c	/^int qpasswd_getpass(void)$/;"	f
qpasswd_lastpop_update	./qpasswd_lastpop_update.c	/^void qpasswd_lastpop_update(void)$/;"	f
qpwds	./do_checkqpasswd.c	/^char qpwds[QPASSWD_MAX];$/;"	v
read3	./read3.c	/^void read3()$/;"	f
rfc_test_t	./test_cases.h	/^} rfc_test_t;$/;"	t	typeref:struct:__anon5
s	./qpasswd.h	/^	char s[BUFSIZE];$/;"	m	struct:__anon3
sasl	./do_checkqpasswd.c	/^const char *sasl[] = {$/;"	v
scan_hex	./m_tests.c	/^int scan_hex(const char *src, char *dst)$/;"	f
scan_i32	./scan_i32.c	/^size_t scan_i32(const u8 *src, i32 *dst)$/;"	f
scan_ip4	./scan_ip4.c	/^size_t scan_ip4(const u8 *src, u8 ip[4])$/;"	f
scan_plusminus	./scan_plusminus.c	/^size_t scan_plusminus(const u8 *src, int *dst)$/;"	f
scan_rfcdata	./m_tests.c	/^int scan_rfcdata(const char *src, char *dst, int len)$/;"	f
scan_u32	./scan_u32.c	/^size_t scan_u32(const u8 *src, u32 *dst)$/;"	f
shell	./main.c	/^char *home, *shell, *default_shell=DEFAULT_SHELL;$/;"	v
show_result	./m_tests.c	/^void show_result(char *v1, char *v2, int len)$/;"	f
sig_catch	./sig_catch.c	/^void sig_catch(int sig, void (*f)(int))$/;"	f
sig_pipedefault	./sig_pipedefault.c	/^void sig_pipedefault(void)$/;"	f
str_t	./qpasswd.h	/^} str_t;$/;"	t	typeref:struct:__anon3
switch2user	./switch2user.c	/^void switch2user(const int uid, const int gid, const char *user)$/;"	f
test1	./test_cases.h	/^  char *test1, *test2;$/;"	m	struct:__anon5
test2	./test_cases.h	/^  char *test1, *test2;$/;"	m	struct:__anon5
test_hmac_16	./test_cases.c	/^rfc_test_t test_hmac_16[] = {$/;"	v
test_hmac_20	./test_cases.c	/^rfc_test_t test_hmac_20[] = {$/;"	v
u32	./types.h	/^typedef unsigned int u32;$/;"	t
u8	./types.h	/^typedef unsigned char u8;$/;"	t
usage	./usage.c	/^void usage(void)$/;"	f
zeroall	./zeroall.c	/^void zeroall(void)$/;"	f
